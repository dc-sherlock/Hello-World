约瑟夫环的数组实现
1.问题
问题描述
已知n个人（以编号1,2,3,...,n分别表示）围坐在一张圆桌周围，从编号为k的人开始报数，数到m的那个人出列；他的下一个人又从1开始报数，数到m的那个人又出列；依此规律重复下去，直到圆桌周围的人全部出列。
输入数据
每行包含3个正整数n,k,m，3个正整数均可以使用32-bit integer来表示。
输出要求
对于每个测试用例，你应当输出一行，依次输出出列人员人员编号，以空格间隔。
输入样例
3 2 20
9 1 5
输出样例
3 2 1
5 1 7 4 3 6 9 2 8

2.解题思路
这里讨论利用数组来求出序列。首先数组存放从1到n的编号，令i为当前未出列的总人数，k = k - 1（数组下标从0开始），报数为m的人的下标可以表示为k = (m + k - 1) % i；然后保存此人的编号，将k之前的序列向后移动一位，覆盖k，然后将位置i - 1的编号移动到首位，位置i - 1保存出列编号，此时从0到i - 2共i个人仍然组成顺序正确的未出列序列；循环进行此过程直到所有人的出列，而出列人逆序存放在原数组中。

3.源代码
#include <stdio.h>
#include <stdlib.h>

int main(){
	int *A;
	int n, m, i, j, k;
	while(scanf("%d%d%d", &n, &k, &m) == 3){
		A = (int *)malloc(sizeof(int) * n);
		for(i = 0; i < n; i++)
			A[i] = i + 1;
		i = j = n;
		--k;
		while(i > 0){
			k = (m + k - 1) % i;
			j = A[k];
			memmove(&A[1], &A[0], sizeof(int) * k);
			A[0] = A[i - 1];
			A[i - 1] = j;
			i--;
			k++;
		}
		for(i = n - 1; i >= 0; i--){
			printf("%d", A[i]);
			if(i > 0)
				printf(" ");
			else
				printf("\n");
		}
	}
}